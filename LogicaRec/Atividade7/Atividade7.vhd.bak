library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Atividade7 is
    Port (
        clk       : in  STD_LOGIC; -- Clock principal
        reset     : in  STD_LOGIC; -- Botão de reset
        pause     : in  STD_LOGIC; -- Botão de pausa
        led       : out STD_LOGIC; -- LED de término
        ssd_a     : out STD_LOGIC_VECTOR (6 downto 0); -- SSD unidade
        ssd_b     : out STD_LOGIC_VECTOR (6 downto 0); -- SSD dezena
        ssd_c     : out STD_LOGIC_VECTOR (6 downto 0); -- SSD centena
        ssd_d     : out STD_LOGIC_VECTOR (6 downto 0)  -- SSD milhar
    );
end Atividade7;

architecture Atividade7 of Atividade7 is
    signal count      : INTEGER range 0 to 9999 := 60; -- Tempo inicial (ajustar conforme desejado)
    signal paused     : STD_LOGIC := '0';
    signal clk_div    : INTEGER := 0; -- Divisor de clock
    signal bcd_digits : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');

    -- Função de conversão binário para BCD
    function bin_to_bcd(input_val : INTEGER) return STD_LOGIC_VECTOR is
        variable temp   : INTEGER := input_val;
        variable bcd    : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
    begin
        bcd(15 downto 12) := CONV_STD_LOGIC_VECTOR((temp / 1000), 4);
        temp := temp mod 1000;
        bcd(11 downto 8)  := CONV_STD_LOGIC_VECTOR((temp / 100), 4);
        temp := temp mod 100;
        bcd(7 downto 4)   := CONV_STD_LOGIC_VECTOR((temp / 10), 4);
        bcd(3 downto 0)   := CONV_STD_LOGIC_VECTOR((temp mod 10), 4);
        return bcd;
    end function;

    -- Processo para dividir o clock (1Hz)
begin
    clock_divider: process(clk)
    begin
        if rising_edge(clk) then
            if clk_div = 49999999 then -- Ajuste para clock de 50MHz
                clk_div <= 0;
                if paused = '0' and count > 0 then
                    count <= count - 1; -- Decrementa o contador
                end if;
            else
                clk_div <= clk_div + 1;
            end if;
        end if;
    end process;

    -- Controle de reset e pausa
    control: process(clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                count <= 60; -- Tempo inicial (exemplo: 60 segundos)
                paused <= '0';
            elsif pause = '1' then
                paused <= not paused; -- Alterna entre pausa e execução
            end if;
        end if;
    end process;

    -- Atualização do LED
    led <= '1' when count = 0 else '0';

    -- Conversão binário para BCD
    bcd_digits <= bin_to_bcd(count);

    -- Mapeamento BCD para display de 7 segmentos
    process(bcd_digits)
    begin
        case bcd_digits(3 downto 0) is
            when "0000" => ssd_a <= "0000001"; -- 0
            when "0001" => ssd_a <= "1001111"; -- 1
            when "0010" => ssd_a <= "0010010"; -- 2
            when "0011" => ssd_a <= "0000110"; -- 3
            when "0100" => ssd_a <= "1001100"; -- 4
            when "0101" => ssd_a <= "0100100"; -- 5
            when "0110" => ssd_a <= "0100000"; -- 6
            when "0111" => ssd_a <= "0001111"; -- 7
            when "1000" => ssd_a <= "0000000"; -- 8
            when "1001" => ssd_a <= "0000100"; -- 9
            when others => ssd_a <= "1111111"; -- Apagado
        end case;

        case bcd_digits(7 downto 4) is
            when "0000" => ssd_b <= "0000001"; -- 0
            when "0001" => ssd_b <= "1001111"; -- 1
            -- Continue o mapeamento...
            when others => ssd_b <= "1111111"; -- Apagado
        end case;

        case bcd_digits(11 downto 8) is
            when "0000" => ssd_c <= "0000001"; -- 0
            when "0001" => ssd_c <= "1001111"; -- 1
            -- Continue o mapeamento...
            when others => ssd_c <= "1111111"; -- Apagado
        end case;

        case bcd_digits(15 downto 12) is
            when "0000" => ssd_d <= "0000001"; -- 0
            when "0001" => ssd_d <= "1001111"; -- 1
            -- Continue o mapeamento...
            when others => ssd_d <= "1111111"; -- Apagado
        end case;
    end process;

end Atividade7;
